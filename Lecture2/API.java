package Lecture2;

public class API {

    // API - это контракт, который предоставляет программа.
    // "Ко мне можно обращаться та ки так, я обязуюсь детаь то и это"
    // Некоторые возможности, которые предоставляют разработчики для удобного
    // взаимодействия с его функционалом
    public static void main(String[] args) {

        // !!!строки - созддать строку с милионом +

        // String str = "";
        // for (int i = 0; i < 1000000; i++) {
        // str += "+";
        // }

        StringBuilder sd = new StringBuilder();
        for (int i = 0; i < 1000000; i++) {
            sd.append("+");
        }

        /*
         * Функционал типа String.
         * concat(): объединение строк
         * valueOf(): преобразует Object в строковое представление (завязан на
         * toString())
         * join(): объединяет набор строк в одну с учетом разделителя
         * charAt(): получение символа по индексу
         * indexOf(): первый индекс вхождения подстроки
         * lastIndexOf(): последний индекс вхождения подстроки
         * startsWith()/endsWith(): определяет, начинается/заканчивается ли строка с
         * подстроки
         * replace(): замена одной подстроки на другую
         * trim(): удаляет начальные и конечные пробелы
         * substring(): возвращает подстроку, см.аргументы
         * toLowerCase()/toUpperCase(): возвращает новую строку в нижнем/верхнем
         * регистре
         * сompareTo(): сравнивает две строки
         * equals(): сравнивает строки с учетом регистра
         * equalsIgnoreCase(): сравнивает строки без учета регистра
         * regionMatches(): сравнивает подстроки в строках
         */

        /*
         * Для работы с файловой системой нужен тип File
         * File<name> = new File<полный путь к файлу>
         */

        /*
         * Работа с ошибками
         * 
         * try {
         * // Код в которм может появится ошибка
         * } catch (Exception e) {
         * // обработка, если ошибка случилась
         * } finally {
         * // Код которыйвыплнится в любом случае
         * }
         */

        /*
         * Команды для библиотеки File
         * isHidden(): возвращает истину, если каталог или файл является скрытым
         * length(): возвращает размер файла в байтах
         * lastModified(): возвращает время последнего изменения файла или каталога
         * list(): возвращает массив файлов и подкаталогов, которые находятся в каталоге
         * listFiles(): возвращает массив файлов и подкаталогов, которые находятся в
         * определенном каталоге
         * mkdir(): создает новый каталог
         * renameTo(File dest): переименовывает файл или каталог
         * length(): возвращает размер файла в байтах
         * lastModified(): возвращает время последнего изменения файла или каталога
         * list(): возвращает массив файлов и подкаталогов, которые находятся в каталоге
         * listFiles(): возвращает массив файлов и подкаталогов, которые находятся в
         * определенном каталоге
         * mkdir(): создает новый каталог
         * renameTo(File dest): переименовывает файл или каталог
         */

        /*
         * Логирование
         * Логи содержат системную информацию работы программного или аппаратного
         * комплекса
         * В них записываются действия разного приоритетаот пользоваателя,или
         * программного продукта
         * Процесс ведения логов называется "логирование"(журналированием)
         */

        /*
         * Использование
         * Logger logger = Logger.getLogger()
         * 
         * Уровни важности
         * INFO, DEBUG, ERROR, WARNING и др.
         * 
         * Вывод
         * ConsoleHandler info = new ConsoleHandler();
         * log.addHandler(info);
         * 
         * Формат вывода: структурированный, абы как*
         * XMLFormatter, SimpleFormatter
         */
    }
}
